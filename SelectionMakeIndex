Пересоставление +++
Принт +
Количество ++
Сумма ++


("Год","2019"): DP1(1042), DP1(1096), DP1(1094)
("Год","2020"): DP1(984), DP1(534), DP1(1061)
("Год","2021"): DP1(869)
("Дата и время","15 мая 16:00"): DP2(1042), DP2(1096), DP2(984), DP2(534), DP2(869)
("Дата и время","16 мая 13:46"): DP2(1094), DP2(1061)
("Покупка","Пицца"): DP3(1042), DP3(1094), DP3(984), DP3(1061), DP3(869)

Пересоставление +
Принт ++
Количество +
Сумма ++

("Год","2019", 0): DP1(1042)
("Год","2019", 1): DP1(1096)
("Год","2019", 2): DP1(1094)
("Год","2020", 3): DP1(984)
("Год","2020", 4): DP1(534)
("Год","2020", 5): DP1(1061)
("Год","2021", 6): DP1(869)
("Дата и время","15 мая 16:00", 0): DP2(1042)
("Дата и время","15 мая 16:00", 1): DP2(1096)
("Дата и время","15 мая 16:00", 3): DP2(984)
("Дата и время","15 мая 16:00", 4): DP2(534)
("Дата и время","15 мая 16:00", 6): DP2(869)
("Дата и время","16 мая 13:46", 2): DP2(1094)
("Дата и время","16 мая 13:46", 5): DP2(1061)
("Покупка","Пицца", 0): DP3(1042)
("Покупка","Пицца", 2): DP3(1094)
("Покупка","Пицца", 3): DP3(984)
("Покупка","Пицца", 5): DP3(1061)
("Покупка","Пицца", 6): DP3(869)
("Покупка","Вода", 1): DP3(1096)
("Покупка","Вода", 4): DP3(534)


Пересоставление x
Принт +++
Количество +++
Сумма +++


(0, "Год","2019"): DP1(1042)
(0, "Дата и время","15 мая 16:00"): DP2(1042)
(0, "Покупка","Пицца"): DP3(1042)
(1, "Год","2019"): DP1(1096)
(1, "Дата и время","15 мая 16:00"): DP2(1096)
(1, "Покупка","Вода"): DP3(1096)
(2, "Год","2019"): DP1(1094)
(2, "Дата и время","16 мая 13:46"): DP2(1094)
(2, "Покупка","Пицца"): DP3(1094)
(3, "Год","2020"): DP1(984)
(3, "Дата и время","15 мая 16:00"): DP2(984)
(3, "Покупка","Пицца"): DP3(984)
(4, "Год","2020"): DP1(534)
(4, "Дата и время","15 мая 16:00"): DP2(534)
(4, "Покупка","Вода"): DP3(534)
(5, "Год","2020"): DP1(1061)
(5, "Дата и время","16 мая 13:46"): DP2(1061)
(5, "Покупка","Пицца"): DP3(1061)
(6, "Год","2021"): DP1(869)
(6, "Дата и время","15 мая 16:00"): DP2(869)
(6, "Покупка","Пицца"): DP3(869)




std::map<std::tuple<const std::string, const std::string, uint32_t>, int> map = { 
		{std::make_tuple("Год","2019", 0),-14},
		{std::make_tuple("Год","2019", 1),15},
		{std::make_tuple("Год","2019", 2),22},
		{std::make_tuple("Год","2020", 3),-14},
		{std::make_tuple("Год","2020", 4),15},
		{std::make_tuple("Год","2020", 5),15},
		{std::make_tuple("Год","2021", 6),22},
		{std::make_tuple("Дата и время","15 мая 16:00", 0),22},
		{std::make_tuple("Дата и время","15 мая 16:00", 1),-22},
		{std::make_tuple("Дата и время","15 мая 16:00", 3),0},
		{std::make_tuple("Дата и время","15 мая 16:00", 4),231},
		{std::make_tuple("Дата и время","15 мая 16:00", 6),-231},
		{std::make_tuple("Дата и время","16 мая 13:46", 2),356},
		{std::make_tuple("Дата и время","16 мая 13:46", 5),22},
		{std::make_tuple("Покупка","Пицца", 0),-5},
		{std::make_tuple("Покупка","Пицца", 2),422},
		{std::make_tuple("Покупка","Пицца", 3),3212},
		{std::make_tuple("Покупка","Пицца", 5),202},
		{std::make_tuple("Покупка","Пицца", 6),22},
		{std::make_tuple("Покупка","Вода", 1),-22},
		{std::make_tuple("Покупка","Вода", 4),22},
	};

	auto it = map.upper_bound(std::make_tuple("Год", "2020", 999999));
	auto it2 = map.lower_bound(std::make_tuple("Год", "2020", 999999));
	auto it3 = map.equal_range(std::make_tuple("Год", "2020", 999999));
	auto it4 = map.upper_bound(std::make_tuple("Год", "2020", 0));
	auto it5 = map.lower_bound(std::make_tuple("Год", "2020", 0));


	std::map<std::tuple<uint32_t, const std::string, const std::string>, int> map2 = {
		{std::make_tuple(0, "Год","2019"),-14},
		{std::make_tuple(0, "Дата и время","15 мая 16:00"),15},
		{std::make_tuple(0, "Покупка","Пицца"),22},
		{std::make_tuple(1, "Год","2019"),-14},
		{std::make_tuple(1, "Дата и время","15 мая 16:00"),15},
		{std::make_tuple(1, "Покупка","Вода"),15},
		{std::make_tuple(2, "Год","2019"),22},
		{std::make_tuple(2, "Дата и время","16 мая 13:46"),22},
		{std::make_tuple(2, "Покупка","Пицца"),-22},
		{std::make_tuple(3, "Год","2020"),0},
		{std::make_tuple(3, "Дата и время","15 мая 16:00"),231},
		{std::make_tuple(3, "Покупка","Пицца"),-231},
		{std::make_tuple(4, "Год","2020"),356},
		{std::make_tuple(4, "Дата и время","15 мая 16:00"),22},
		{std::make_tuple(4, "Покупка","Вода"),-5},
		{std::make_tuple(5, "Год","2020"),422},
		{std::make_tuple(5, "Дата и время","16 мая 13:46"),3212},
		{std::make_tuple(5, "Покупка","Пицца"),202},
		{std::make_tuple(6, "Год","2021"),22},
		{std::make_tuple(6, "Дата и время","15 мая 16:00"),-22},
		{std::make_tuple(6, "Покупка","Пицца"),22},
	};

	auto ite = map2.upper_bound(std::make_tuple(999999, "Год", "2020"));
	auto ite2 = map2.lower_bound(std::make_tuple(999999, "Год", "2020"));
	auto ite3 = map2.equal_range(std::make_tuple(999999, "Год", "2020"));
	auto ite4 = map2.upper_bound(std::make_tuple(0, "Год", "2020"));
	auto ite5 = map2.lower_bound(std::make_tuple(0, "Год", "2020"));
